@model MMC2.Models.Historico

@{
    ViewBag.Title = "Create";
}
@section Scripts {
    <script src="~/Scripts/jquery-1.9.1.js"></script>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script src="~/Scripts/jquery-ui-1.10.3.custom.min.js"></script>
    <script src="~/Scripts/jquery.maskedinput.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {


            $("#lnkVoltar").button({ icons: { primary: "ui-icon-arrowreturnthick-1-w" } });
            $("#btnSalvar").button({
                icons: {
                    primary: "ui-icon-disk"
                },
                text: false
            })

            atualizarTarefa();
            atualizarHistorico();
           
        });


        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);


        function setAguarde(dv) {
            $("#" + dv).html("<img src='/images/ajaxP.gif'/ alt=''>&nbsp;Aguarde...");
        }

        function atualizarHistorico() {

            $.ajax(
            {
                type: 'GET',
                url: '/Dashuser/GridHistorico/',
                dataType: 'html',
                cache: false,
                async: true,
                success: function (data) {
                    $('#gridHistoricos').html(data);
                }
            });
        }
        
        function atualizarTarefa() {

            $.ajax(
            {
                type: 'GET',
                url: '/Dashuser/GridTarefa/',
                dataType: 'html',
                cache: false,
                async: true,
                success: function (data) {
                    $('#gridTarefas').html(data);
                }
            });
        }

      

        function drawChart() {

            $.ajax({
                type: "GET",
                url: "/Dashuser/GetAreaChartData/",
                dataType: "json",
                cache: false,
                success: function (data) {

                    var tdata = new google.visualization.DataTable();
                    var rows = data.length;
                    var cols = data[0].length;

                    tdata.addColumn('string', data[0][0]);
                    for (var i = 0; i < cols; i++) {
                        tdata.addColumn('number', data[0][i]);
                    }

                    tdata.addRows(data.length);
                    for (var i = 1; i < data.length; i++) {
                        tdata.setCell(i, 0, data[i][0]);
                        for (var j = 1; j < cols; j++) {
                            var value = parseInt(data[i][j]);
                            tdata.setCell(i, j, value);

                        }
                    }


                    var options = {
                        title: '',
                        legend: { position: 'bottom' },
                        chartArea: { height: '500', width: '500' },
                        is3D: 'true',
                        backgroundColor: '#efeeef',
                        fontSize: '14'
                    };

                    //alert(tdata);
                    var chart = new google.visualization.PieChart(document.getElementById('grafico_status'));
                    chart.draw(tdata, options);
                }
            });
        }

        google.load('visualization', '1', { packages: ['gauge'] });
        google.setOnLoadCallback(drawChart2);
        function drawChart2() {

            $.ajax({
                type: "GET",
                url: "/Dashuser/GetGauge/",
                dataType: "json",
                cache: false,
                success: function (data) {

                    var tdata = new google.visualization.DataTable();
                    var rows = data.length;
                    var cols = data[0].length;

                    tdata.addColumn('string', data[0][0]);
                    for (var i = 0; i < cols; i++) {
                        tdata.addColumn('number', data[0][i]);

                    }

                    tdata.addRows(data.length);
                    for (var i = 1; i < data.length; i++) {
                        tdata.setCell(i, 0, data[i][0]);
                        for (var j = 1; j < cols; j++) {
                            var value = parseInt(data[i][j]);
                            tdata.setCell(i, j, value);

                        }
                    }

                    var options = {
                        width: 450, height: 200,
                        redFrom: 35, redTo: 50,
                        yellowFrom: 25, yellowTo: 35,
                        max: 50,
                        minorTicks: 5
                    };

                    var chart = new google.visualization.Gauge(document.getElementById('chart_div'));
                    chart.draw(tdata, options);
                }
            });
        }
    </script>
}

<h2>Gerenciamento de tarefas</h2>
<div id="criar_historico">

    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)

        <div style="border: 1px; float: left; margin: 10px">
            <div class="editor-label">
                @Html.LabelFor(model => model.QtdHoras)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.QtdHoras)
                @Html.ValidationMessageFor(model => model.QtdHoras)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.DataLancamento)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.DataLancamento)
                @Html.ValidationMessageFor(model => model.DataLancamento)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Descrição)
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => model.Descrição)
                @Html.ValidationMessageFor(model => model.Descrição)
            </div>
        </div>
        <div style="border: 1px; float: left; margin: 10px">
            <div class="editor-label">
                @Html.LabelFor(model => model.Tarefa_Id, "Tarefas Ativas")
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.Tarefa_Id, new SelectList(ViewBag.Tar, "Id", "Nome"),
                "", new { id = "Tarefa" })
            </div>

            @*  <div class="editor-label">
            @Html.LabelFor(model => model.Usuario_Id, "Usuario Executor")
        </div>
        <div class="editor-field">
            @Html.DropDownList("Usuario_Id", String.Empty)
            @Html.ValidationMessageFor(model => model.Usuario_Id)
        </div>*@

            <p>
                <input type="submit" value="Criar histórico" id="btnSalvar" />
            </p>
           
        </div>
 
    }
</div>

<div id="gridTarefas" style="float:left;  margin:15px;" ></div>
<div id="gridHistoricos" style="float:left;  margin:15px;"></div>